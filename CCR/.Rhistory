names(mandate_vec) = names
new_votes_vec = votes_vec
for (i in 1:mandate_count) {
ind = which.max(new_votes_vec)
mandate_vec[ind] = mandate_vec[ind]+1
new_votes_vec[ind] = votes_vec[ind]/(mandate_vec[ind]+1)
#new_votes_vec[ind] = apply_dhondt(votes_vec[ind],(i+1))
}
print(new_votes_vec)
return(mandate_vec)
}
test = distribute_mandates(all,14) ########### Mandatfordeling uden valgforbund
distribute_mandates_with_groups = function(votes_vec,mandate_count,groups) {
grouped_vec = c()
for (i in 1:length(groups)) {
group_name = groups[[i]]
grouped_vec = c(grouped_vec,sum(votes_vec[which(names(votes_vec) %in% group_name)]))
}
names(grouped_vec) = names(groups)
grouped_mandates = distribute_mandates(grouped_vec,mandate_count)
party_mandate_vec = rep(0,length(votes_vec))
names(party_mandate_vec) = names(votes_vec)
for (i in 1:length(groups)) {
parties = as.vector(groups[[i]])
party_votes = votes_vec[which(names(votes_vec) %in% parties)]
group_mandate_count = grouped_mandates[i]
party_mandates = distribute_mandates(party_votes,group_mandate_count)
for (i in 1:length(party_mandates)) {
party_mandate_vec[which(names(party_mandate_vec)==names(party_mandates)[i])] = party_mandates[i]
}
}
return(list('Party_mandates'=party_mandate_vec,'Group_mandates'=grouped_mandates))
}
distribute_mandates_with_groups(all,14,groups) ########### Mandatfordeling uden valgforbund per parti og per valgforbund
groups2 =list('AF'=c('A','F'),'VIF'=c('V','I','C'),'B'=c('B'),'ØN'=c('Ø','N'),'O'=c('O'),'Å'=c('Å'))
distribute_mandates_with_groups(all,14,groups2) ########### Mandatfordeling uden valgforbund per parti og per valgforbund
distribute_mandates_with_groups(all,14,groups) ########### Mandatfordeling uden valgforbund per parti og per valgforbund
A = 21.9
B = 10.1
C = 6.1
F = 13.1
I = 2.2
N = 3.8
O = 10.9
V = 23.5
Ø = 5.2
Å = 3.1
all = c(A,B,C,F,I,N,O,V,Ø,Å)
sum(all)
names(all) = c('A','B','C','F','I','N','O','V','Ø','Å')
groups = list('AF'=c('A','F'),'VIF'=c('V','I','C'),'BÅ'=c('B','Å'),'ØN'=c('Ø','N'),'O'=c('O'))
total_mandates = 14
apply_dhondt = function(votes,i) {
return(votes/(i*2-1))
}
distribute_mandates = function(votes_vec,mandate_count) {
names = names(votes_vec)
mandate_vec = rep(0,length(names))
names(mandate_vec) = names
new_votes_vec = votes_vec
for (i in 1:mandate_count) {
ind = which.max(new_votes_vec)
mandate_vec[ind] = mandate_vec[ind]+1
new_votes_vec[ind] = votes_vec[ind]/(mandate_vec[ind]+1)
#new_votes_vec[ind] = apply_dhondt(votes_vec[ind],(i+1))
}
print(new_votes_vec)
return(mandate_vec)
}
test = distribute_mandates(all,14) ########### Mandatfordeling uden valgforbund
distribute_mandates_with_groups = function(votes_vec,mandate_count,groups) {
grouped_vec = c()
for (i in 1:length(groups)) {
group_name = groups[[i]]
grouped_vec = c(grouped_vec,sum(votes_vec[which(names(votes_vec) %in% group_name)]))
}
names(grouped_vec) = names(groups)
grouped_mandates = distribute_mandates(grouped_vec,mandate_count)
party_mandate_vec = rep(0,length(votes_vec))
names(party_mandate_vec) = names(votes_vec)
for (i in 1:length(groups)) {
parties = as.vector(groups[[i]])
party_votes = votes_vec[which(names(votes_vec) %in% parties)]
group_mandate_count = grouped_mandates[i]
party_mandates = distribute_mandates(party_votes,group_mandate_count)
for (i in 1:length(party_mandates)) {
party_mandate_vec[which(names(party_mandate_vec)==names(party_mandates)[i])] = party_mandates[i]
}
}
return(list('Party_mandates'=party_mandate_vec,'Group_mandates'=grouped_mandates))
}
distribute_mandates_with_groups(al
distribute_mandates_with_groups(all,14,groups) ########### Mandatfordeling uden valgforbund per parti og per valgforbund
A = 21.9
B = 10.1
C = 6.1
F = 13.1
I = 2.2
N = 3.8
O = 10.9
V = 23.5
Ø = 5.2
Å = 3.1
all = c(A,B,C,F,I,N,O,V,Ø,Å)
sum(all)
names(all) = c('A','B','C','F','I','N','O','V','Ø','Å')
groups = list('AF'=c('A','F'),'VIF'=c('V','I','C'),'BÅ'=c('B','Å'),'ØN'=c('Ø','N'),'O'=c('O'))
total_mandates = 14
apply_dhondt = function(votes,i) {
return(votes/(i*2-1))
}
distribute_mandates = function(votes_vec,mandate_count) {
names = names(votes_vec)
mandate_vec = rep(0,length(names))
names(mandate_vec) = names
new_votes_vec = votes_vec
for (i in 1:mandate_count) {
ind = which.max(new_votes_vec)
mandate_vec[ind] = mandate_vec[ind]+1
new_votes_vec[ind] = votes_vec[ind]/(mandate_vec[ind]+1)
#new_votes_vec[ind] = apply_dhondt(votes_vec[ind],(i+1))
}
print(new_votes_vec)
return(mandate_vec)
}
test = distribute_mandates(all,14) ########### Mandatfordeling uden valgforbund
distribute_mandates_with_groups = function(votes_vec,mandate_count,groups) {
grouped_vec = c()
for (i in 1:length(groups)) {
group_name = groups[[i]]
grouped_vec = c(grouped_vec,sum(votes_vec[which(names(votes_vec) %in% group_name)]))
}
names(grouped_vec) = names(groups)
grouped_mandates = distribute_mandates(grouped_vec,mandate_count)
party_mandate_vec = rep(0,length(votes_vec))
names(party_mandate_vec) = names(votes_vec)
for (i in 1:length(groups)) {
parties = as.vector(groups[[i]])
party_votes = votes_vec[which(names(votes_vec) %in% parties)]
group_mandate_count = grouped_mandates[i]
party_mandates = distribute_mandates(party_votes,group_mandate_count)
for (i in 1:length(party_mandates)) {
party_mandate_vec[which(names(party_mandate_vec)==names(party_mandates)[i])] = party_mandates[i]
}
}
return(list('Party_mandates'=party_mandate_vec,'Group_mandates'=grouped_mandates))
}
distribute_mandates_with_groups(all,14,groups) ########### Mandatfordeling uden valgforbund per parti og per valgforbund
library(ape)
library(phytools)
library(alluvial)
setwd("/Volumes/data/MPV/projects/SCCmec/CCR")
setwd("E:/Github/SCCmec/CCR")
sp_count_table = read.table("/Volumes/data/DB/refseq/Staphylococcus_species_counts_191128.txt",sep = "\t")
sp_count_table = read.table("https://raw.githubusercontent.com/ssi-dk/SCCmec/master/Staphylococcus_species_counts_191128.txt",sep = "\t")
sp_count_vec = sp_count_table$V2
names(sp_count_vec) = sp_count_table$V1
excluded_isolates = readLines("https://raw.githubusercontent.com/ssi-dk/SCCmec/master/QC/excluded_isolates.txt")
excluded_GCF_IDs = unlist(lapply(as.vector(excluded_isolates), function(x) paste0(strsplit(x,"_")[[1]][4:5],collapse="_")))
#### ccr all ####
tbl = read.table("protein_blast/ccr_all_with_IWG_uniq_table.txt",sep = "\t",row.names=NULL,header = T,comment.char = "",check.names = F,quote = "")
tbl = read.table("https://github.com/ssi-dk/SCCmec/blob/master/CCR/ccr_all_with_IWG_uniq_table.txt?raw=true",sep = "\t",row.names=NULL,header = T,comment.char = "",check.names = F,quote = "")
tbl$GCF_ID = unlist(lapply(as.vector(tbl$ID), function(x) paste0(strsplit(x,"_")[[1]][4:5],collapse="_")))
exclude_index = which(tbl$GCF_ID %in% excluded_GCF_IDs)
exclude_uniq_seq_ID = as.vector(tbl$uniq_fasta_ID)[which(tbl$GCF_ID %in% excluded_GCF_IDs & tbl$seq_count==1)]
tbl = tbl[-exclude_index,]
aln_exclude_idx = which(labels(aln) %in% exclude_uniq_seq_ID)
aln_filtered = aln[-aln_exclude_idx,]
aln_original = aln
dist_mat_original = dist_mat
dist_mat_exclude_idx = which(rownames(dist_mat_original) %in% exclude_uniq_seq_ID)
dist_mat = dist_mat_original[-dist_mat_exclude_idx,-dist_mat_exclude_idx]
dist_obj = as.dist(dist_mat)
fit = hclust(dist_obj,method = "complete")
dist_mat = read.table("https://github.com/ssi-dk/SCCmec/blob/master/CCR/ccr_muscle_percent_distance.txt?raw=true",sep="\t",header=T,row.names=1)
dist_mat = as.matrix(dist_mat)
dist_mat_original = dist_mat
dist_mat_exclude_idx = which(rownames(dist_mat_original) %in% exclude_uniq_seq_ID)
dist_mat = dist_mat_original[-dist_mat_exclude_idx,-dist_mat_exclude_idx]
dist_obj = as.dist(dist_mat)
fit = hclust(dist_obj,method = "complete")
plot(fit)
ccr_groups = cutree(fit,h=49)
rect.hclust(fit,h=49)
tbl$ccr_group = NA
for (i in 1:length(ccr_groups)) {
name = names(ccr_groups)[i]
group = ccr_groups[i]
tbl$ccr_group[which(tbl$uniq_fasta_ID==name)] = group
}
tbl$ccr_group[grep('ccrA',tbl$fasta_ID)]
tbl$ccr_group[grep('ccrB',tbl$fasta_ID)]
tbl$ccr_group[grep('ccrC',tbl$fasta_ID)]
tbl$ccr_haplotype = paste0('ccrN',as.vector(tbl$ccr_group))
tbl$ccr_haplotype[which(tbl$ccr_group==5)] = 'ccrB'
tbl$ccr_haplotype[which(tbl$ccr_group==6)] = 'ccrA'
tbl$ccr_haplotype[which(tbl$ccr_group==7)] = 'ccrC'
table(tbl$ccr_haplotype)
tbl[grep('IWG',tbl$fasta_ID),]
tbl$ccr_haplotype = factor(tbl$ccr_haplotype)
haplotype_colors = RColorBrewer::brewer.pal(7,"Set1")
ccr_haplotype_vec = levels(tbl$ccr_haplotype)
tbl$haplotype_color = NA
for (i in 1:length(haplotype_colors)) {
col = haplotype_colors[i]
ccr_type = ccr_haplotype_vec[i]
tbl$haplotype_color[which(tbl$ccr_haplotype==ccr_type)] = col
}
uniq_tbl = tbl[which(!duplicated(as.vector(tbl$uniq_fasta_ID))),]
dist_mat = as.matrix(read.table("https://raw.githubusercontent.com/ssi-dk/SCCmec/master/CCR/ccrB_pairwise_sim.txt",sep = "\t",header=T, row.names=1))
ccrB_exclude_idx = which(rownames(dist_mat) %in% exclude_uniq_seq_ID)
dist_mat = dist_mat[-ccrB_exclude_idx,-ccrB_exclude_idx]
aln_dist = as.dist(dist_mat)
fit = hclust(aln_dist,method = "single")
plot(fit)
ccr_groups = cutree(fit,h=18)
rect.hclust(fit,h=18)
tbl$ccrB_group = NA
for (i in 1:length(ccr_groups)) {
name = names(ccr_groups)[i]
group = ccr_groups[i]
tbl$ccrB_group[which(tbl$uniq_fasta_ID==name)] = group
}
tbl$ccr_allotype = paste0(as.vector(tbl$ccr_haplotype),'n',as.vector(tbl$ccrB_group))
IWG_ccrB_tbl = tbl[grep('ccrB',tbl$fasta_ID),]
table(as.vector(IWG_ccrB_tbl$fasta_ID),as.vector(IWG_ccrB_tbl$ccrB_group))
sort(unique(ccr_groups))
ccrB_tbl = tbl[which(tbl$ccr_haplotype=="ccrB"),]
allotype_colors = c(RColorBrewer::brewer.pal(12,"Paired"))
#allotype_colors = colorRamps::primary.colors(16)
ccr_allotype_vec = unique(ccrB_tbl$ccr_allotype)
ccrB_tbl$allotype_color = NA
allotype_colors
ccr_allotype_vec
fit = hclust(aln_dist,method = "complete")
plot(fit)
ccr_groups = cutree(fit,h=18)
rect.hclust(fit,h=18)
tbl$ccrB_group = NA
for (i in 1:length(ccr_groups)) {
name = names(ccr_groups)[i]
group = ccr_groups[i]
tbl$ccrB_group[which(tbl$uniq_fasta_ID==name)] = group
}
tbl$ccr_allotype = paste0(as.vector(tbl$ccr_haplotype),'n',as.vector(tbl$ccrB_group))
IWG_ccrB_tbl = tbl[grep('ccrB',tbl$fasta_ID),]
table(as.vector(IWG_ccrB_tbl$fasta_ID),as.vector(IWG_ccrB_tbl$ccrB_group))
sort(unique(ccr_groups))
ccrB_tbl = tbl[which(tbl$ccr_haplotype=="ccrB"),]
allotype_colors = c(RColorBrewer::brewer.pal(12,"Paired"))
#allotype_colors = colorRamps::primary.colors(16)
ccr_allotype_vec = unique(ccrB_tbl$ccr_allotype)
ccrB_tbl$allotype_color = NA
ccr_allotype_vec
ccrB_tbl$allotype_color = NA
for (i in 1:length(allotype_colors)) {
col = allotype_colors[i]
ccr_type = ccr_allotype_vec[i]
idx = which(ccrB_tbl$ccr_allotype==ccr_type)
names = as.vector(ccrB_tbl$fasta_ID[idx])
test = names[grep('IWG',names)]
if (length(test)>0) {
print(test)
t = strsplit(test[1],'_')[[1]][1]
ccrB_tbl$ccr_allotype[idx] = t
}
ccrB_tbl$allotype_color[idx] = col
}
table(ccrB_tbl$ccr_allotype)
ccrB_uniq_tbl = ccrB_tbl[which(!duplicated(as.vector(ccrB_tbl$uniq_fasta_ID))),]
write.table(ccrB_tbl,"ccrB_allotype_table_QC_18.txt",sep = "\t",quote = FALSE,row.names=FALSE)
write.table(ccrB_uniq_tbl,"ccrB_allotype_uniq_table_QC_18.txt",sep = "\t",quote = FALSE,row.names=FALSE)
allotype_colors = colorRamps::primary.colors(15)
ccr_allotype_vec = unique(ccrB_tbl$ccr_allotype)
ccrB_tbl$allotype_color = NA
for (i in 1:length(allotype_colors)) {
col = allotype_colors[i]
ccr_type = ccr_allotype_vec[i]
idx = which(ccrB_tbl$ccr_allotype==ccr_type)
names = as.vector(ccrB_tbl$fasta_ID[idx])
test = names[grep('IWG',names)]
if (length(test)>0) {
print(test)
t = strsplit(test[1],'_')[[1]][1]
ccrB_tbl$ccr_allotype[idx] = t
}
ccrB_tbl$allotype_color[idx] = col
}
rect.hclust(fit,h=18)
tbl$ccrB_group = NA
for (i in 1:length(ccr_groups)) {
name = names(ccr_groups)[i]
group = ccr_groups[i]
tbl$ccrB_group[which(tbl$uniq_fasta_ID==name)] = group
}
tbl$ccr_allotype = paste0(as.vector(tbl$ccr_haplotype),'n',as.vector(tbl$ccrB_group))
IWG_ccrB_tbl = tbl[grep('ccrB',tbl$fasta_ID),]
table(as.vector(IWG_ccrB_tbl$fasta_ID),as.vector(IWG_ccrB_tbl$ccrB_group))
sort(unique(ccr_groups))
ccrB_tbl = tbl[which(tbl$ccr_haplotype=="ccrB"),]
allotype_colors = c(RColorBrewer::brewer.pal(12,"Paired"))
allotype_colors = colorRamps::primary.colors(15)
ccr_allotype_vec = unique(ccrB_tbl$ccr_allotype)
ccrB_tbl$allotype_color = NA
for (i in 1:length(allotype_colors)) {
col = allotype_colors[i]
ccr_type = ccr_allotype_vec[i]
idx = which(ccrB_tbl$ccr_allotype==ccr_type)
names = as.vector(ccrB_tbl$fasta_ID[idx])
test = names[grep('IWG',names)]
if (length(test)>0) {
print(test)
t = strsplit(test[1],'_')[[1]][1]
ccrB_tbl$ccr_allotype[idx] = t
}
ccrB_tbl$allotype_color[idx] = col
}
table(ccrB_tbl$ccr_allotype)
ccrB_uniq_tbl = ccrB_tbl[which(!duplicated(as.vector(ccrB_tbl$uniq_fasta_ID))),]
write.table(ccrB_tbl,"ccrB_allotype_table_QC_18.txt",sep = "\t",quote = FALSE,row.names=FALSE)
write.table(ccrB_uniq_tbl,"ccrB_allotype_uniq_table_QC_18.txt",sep = "\t",quote = FALSE,row.names=FALSE)
to_print = paste0(ccrB_uniq_tbl$uniq_fasta_ID,' ',ccrB_uniq_tbl$allotype_color,' ',ccrB_uniq_tbl$ccr_allotype)
writeLines(to_print,con = "ccrB_allotype_colors_QC_18.txt")
dist_mat = as.matrix(read.table("https://raw.githubusercontent.com/ssi-dk/SCCmec/master/CCR/ccrC_pairwise_sim.txt",sep = "\t",header=T, row.names=1))
ccrC_exclude_idx = which(rownames(dist_mat) %in% exclude_uniq_seq_ID)
dist_mat = dist_mat[-ccrC_exclude_idx,-ccrC_exclude_idx]
aln_dist = as.dist(dist_mat)
fit = hclust(aln_dist,method = "complete")
plot(fit)
ccr_groups = cutree(fit,h=18)
rect.hclust(fit,h=18)
tbl$ccrC_group = NA
for (i in 1:length(ccr_groups)) {
name = names(ccr_groups)[i]
group = ccr_groups[i]
tbl$ccrC_group[which(tbl$uniq_fasta_ID==name)] = group
}
tbl$ccr_allotype = paste0(as.vector(tbl$ccr_haplotype),'n',as.vector(tbl$ccrC_group))
IWG_ccrC_tbl = tbl[grep('ccrC',tbl$fasta_ID),]
table(as.vector(IWG_ccrC_tbl$fasta_ID),as.vector(IWG_ccrC_tbl$ccrC_group))
sort(unique(ccr_groups))
ccrC_tbl = tbl[which(tbl$ccr_haplotype=="ccrC"),]
allotype_colors = c(RColorBrewer::brewer.pal(4,"Set1"))
#allotype_colors = colorRamps::primary.colors(16)
ccr_allotype_vec = unique(ccrC_tbl$ccr_allotype)
ccrC_tbl$allotype_color = NA
for (i in 1:length(allotype_colors)) {
col = allotype_colors[i]
ccr_type = ccr_allotype_vec[i]
idx = which(ccrC_tbl$ccr_allotype==ccr_type)
names = as.vector(ccrC_tbl$fasta_ID[idx])
test = names[grep('IWG',names)]
if (length(test)>0) {
print(test)
t = strsplit(test[1],'_')[[1]][1]
ccrC_tbl$ccr_allotype[idx] = t
}
ccrC_tbl$allotype_color[idx] = col
}
table(ccrC_tbl$ccr_allotype)
ccrC_uniq_tbl = ccrC_tbl[which(!duplicated(as.vector(ccrC_tbl$uniq_fasta_ID))),]
write.table(ccrC_tbl,"ccrC_allotype_table_QC_18.txt",sep = "\t",quote = FALSE,row.names=FALSE)
write.table(ccrC_uniq_tbl,"ccrC_allotype_uniq_table_QC_18.txt",sep = "\t",quote = FALSE,row.names=FALSE)
plot(fit)
ccr_groups = cutree(fit,h=18)
rect.hclust(fit,h=18)
tbl$ccrC_group = NA
for (i in 1:length(ccr_groups)) {
name = names(ccr_groups)[i]
group = ccr_groups[i]
tbl$ccrC_group[which(tbl$uniq_fasta_ID==name)] = group
}
tbl$ccr_allotype = paste0(as.vector(tbl$ccr_haplotype),'n',as.vector(tbl$ccrC_group))
IWG_ccrC_tbl = tbl[grep('ccrC',tbl$fasta_ID),]
table(as.vector(IWG_ccrC_tbl$fasta_ID),as.vector(IWG_ccrC_tbl$ccrC_group))
sort(unique(ccr_groups))
ccrC_tbl = tbl[which(tbl$ccr_haplotype=="ccrC"),]
allotype_colors = c(RColorBrewer::brewer.pal(6,"Set1"))
#allotype_colors = colorRamps::primary.colors(16)
ccr_allotype_vec = unique(ccrC_tbl$ccr_allotype)
ccrC_tbl$allotype_color = NA
for (i in 1:length(allotype_colors)) {
col = allotype_colors[i]
ccr_type = ccr_allotype_vec[i]
idx = which(ccrC_tbl$ccr_allotype==ccr_type)
names = as.vector(ccrC_tbl$fasta_ID[idx])
test = names[grep('IWG',names)]
if (length(test)>0) {
print(test)
t = strsplit(test[1],'_')[[1]][1]
ccrC_tbl$ccr_allotype[idx] = t
}
ccrC_tbl$allotype_color[idx] = col
}
table(ccrC_tbl$ccr_allotype)
ccrC_uniq_tbl = ccrC_tbl[which(!duplicated(as.vector(ccrC_tbl$uniq_fasta_ID))),]
write.table(ccrC_tbl,"ccrC_allotype_table_QC_18.txt",sep = "\t",quote = FALSE,row.names=FALSE)
write.table(ccrC_uniq_tbl,"ccrC_allotype_uniq_table_QC_18.txt",sep = "\t",quote = FALSE,row.names=FALSE)
to_print = paste0(ccrC_uniq_tbl$uniq_fasta_ID,' ',ccrC_uniq_tbl$allotype_color,' ',ccrC_uniq_tbl$ccr_allotype)
writeLines(to_print,con = "ccrC_allotype_colors_QC_18.txt")
head(dist_mat)
library(ape)
library(phytools)
library(alluvial)
setwd("/Volumes/data/MPV/projects/SCCmec/CCR")
setwd("E:/Github/SCCmec/CCR")
sp_count_table = read.table("/Volumes/data/DB/refseq/Staphylococcus_species_counts_191128.txt",sep = "\t")
sp_count_table = read.table("https://raw.githubusercontent.com/ssi-dk/SCCmec/master/Staphylococcus_species_counts_191128.txt",sep = "\t")
sp_count_vec = sp_count_table$V2
names(sp_count_vec) = sp_count_table$V1
tbl = read.table("ccr_haplotype_table_QC.txt", sep = "\t",header=TRUE)
dist_mat = as.matrix(read.table("https://raw.githubusercontent.com/ssi-dk/SCCmec/master/CCR/fastas/ccrA_all_uniq_sim.txt",sep = "\t",header=T, row.names=1))
aln_dist = as.dist(dist_mat)
fit = hclust(aln_dist,method = "complete")
v = c()
for (i in 10:40) {
g = cutree(fit,h=i)
v = c(v,length(unique(g)))
}
v_A = v
plot(10:40,v)
ccr_groups = cutree(fit,h=18)
rect.hclust(fit,h=18)
tbl$ccrA_group = NA
new_ccr_count = 1
unique(ccr_groups)
for (i in 1:length(ccr_groups)) {
name = names(ccr_groups)[i]
group = ccr_groups[i]
tbl$ccrA_group[which(tbl$uniq_fasta_ID==name)] = group
}
tbl$ccr_allotype = paste0(as.vector(tbl$ccr_haplotype),'n',as.vector(tbl$ccrA_group))
triplet_color_vec = c("#61d2ff","#468bfa","#030bfc","#63ff7d","#23db64","#009133","#ff9999","#f03232","#c90000",
"#ffe194","#ffcc47","#e8a800","#f2a8ff","#e44dff","#9e00ba","#f8fc6a","#b8bd00","#786000",
"#c4c4c4","#545454","#000000")
ccr_allotype_vec
fit = hclust(aln_dist,method = "complete")
v = c()
for (i in 10:40) {
g = cutree(fit,h=i)
v = c(v,length(unique(g)))
}
v_A = v
plot(10:40,v)
ccr_groups = cutree(fit,h=18)
rect.hclust(fit,h=18)
tbl$ccrA_group = NA
new_ccr_count = 1
unique(ccr_groups)
for (i in 1:length(ccr_groups)) {
name = names(ccr_groups)[i]
group = ccr_groups[i]
tbl$ccrA_group[which(tbl$uniq_fasta_ID==name)] = group
}
tbl$ccr_allotype = paste0(as.vector(tbl$ccr_haplotype),'n',as.vector(tbl$ccrA_group))
IWG_ccrA_tbl = tbl[grep('ccrA',tbl$fasta_ID),]
table(as.vector(IWG_ccrA_tbl$fasta_ID),as.vector(IWG_ccrA_tbl$ccrA_group))
sort(unique(ccr_groups))
ccrA_tbl = tbl[which(tbl$ccr_haplotype=="ccrA"),]
#allotype_colors = c(RColorBrewer::brewer.pal(12,"Paired"),"#d9d9d9")
allotype_colors = triplet_color_vec[1:19]
ccr_allotype_vec = unique(ccrA_tbl$ccr_allotype)
ccr_allotype_vec
dist_mat = as.matrix(read.table("protein_blast/ccr_haplotype_uniq_fastas/ccrA_pairwise_sim.txt",sep = "\t",header=T, row.names=1))
dist_mat = as.matrix(read.table("https://raw.githubusercontent.com/ssi-dk/SCCmec/master/CCR/fastas/ccrA_all_uniq_sim.txt",sep = "\t",header=T, row.names=1))
aln_dist = as.dist(dist_mat)
fit = hclust(aln_dist,method = "complete")
v = c()
for (i in 10:40) {
g = cutree(fit,h=i)
v = c(v,length(unique(g)))
}
v_A = v
plot(10:40,v)
ccr_groups = cutree(fit,h=18)
rect.hclust(fit,h=18)
tbl$ccrA_group = NA
new_ccr_count = 1
unique(ccr_groups)
for (i in 1:length(ccr_groups)) {
name = names(ccr_groups)[i]
group = ccr_groups[i]
tbl$ccrA_group[which(tbl$uniq_fasta_ID==name)] = group
}
tbl$ccr_allotype = paste0(as.vector(tbl$ccr_haplotype),'n',as.vector(tbl$ccrA_group))
IWG_ccrA_tbl = tbl[grep('ccrA',tbl$fasta_ID),]
table(as.vector(IWG_ccrA_tbl$fasta_ID),as.vector(IWG_ccrA_tbl$ccrA_group))
sort(unique(ccr_groups))
tbl$ccrA_group
ccr_groups
fit = hclust(aln_dist,method = "complete")
v = c()
for (i in 10:40) {
g = cutree(fit,h=i)
v = c(v,length(unique(g)))
}
v_A = v
plot(10:40,v)
ccr_groups = cutree(fit,h=18)
rect.hclust(fit,h=18)
tbl$ccrA_group = NA
new_ccr_count = 1
unique(ccr_groups)
for (i in 1:length(ccr_groups)) {
name = names(ccr_groups)[i]
group = ccr_groups[i]
tbl$ccrA_group[which(tbl$uniq_fasta_ID==name)] = group
}
tbl$ccrA_group
group
ccr_groups
tbl$uniq_fasta_ID
