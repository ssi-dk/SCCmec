table(get_variable(rare_pro,"Age.groups."),get_variable(rare_pro,"Giardia.positive"))
vec = 1:10
unlist(lapply(vec,function(x) (1-(1/10))**x))
source("https://raw.githubusercontent.com/ssi-dk/epidome/master/scripts/epidome_functions.R")
setwd("/Volumes/data/MPV/projects/git.repositories/epidome/")
### Load amplicon table for classification ###
ST_amplicon_table = read.table("DB/epidome_ST_amplicon_frequencies.txt",sep = "\t")
### Load dada2 output for the two primers ###
epi01_mock_table = read.table("example_data/190920_run2_G216_seqtab_from_dada2.csv.classified.csv",sep = ";",header=TRUE,row.names=1)
epi02_mock_table = read.table("example_data/190920_run2_yycH_seqtab_from_dada2.csv.classified.csv",sep = ";",header=TRUE,row.names=1)
epi01_clinical_table = read.table("example_data/190920_run1_G216_seqtab_from_dada2.csv.classified.csv",sep = ";",header=TRUE,row.names=1)
epi02_clinical_table = read.table("example_data/190920_run1_yycH_seqtab_from_dada2.csv.classified.csv",sep = ";",header=TRUE,row.names=1)
epi01_table = combine_ASV_tables(epi01_mock_table,epi01_clinical_table)
epi02_table = combine_ASV_tables(epi02_mock_table,epi02_clinical_table)
epi01_table = read.table("example_data/190920_run1_and_2_G216_seqtab_nochim.csv.classified.csv",sep = ";",header=TRUE,row.names=1)
epi02_table = read.table("example_data/190920_run1_and_2_yycH_seqtab_nochim.csv.classified.csv",sep = ";",header=TRUE,row.names=1)
### Load metadata table
metadata_table = read.table("example_data/article_metadata.txt",header=TRUE,row.names=1)
### Setup an object for easy handling of epidome data
epidome_object = setup_epidome_object(epi01_table,epi02_table,metadata_table = metadata_table)
### Check if number of sequences from each primer for each samples match up approximately ###
compare_primer_output(epidome_object)
compare_primer_output(epidome_object,"sample.type")
compare_primer_output(epidome_object,"patient.sample.site")
### Combine ASVs from dada output ###
epidome_ASV_combined = combine_ASVs_epidome(epidome_object)
### Filter lowcount samples (removes any sample that has less than X sequences from one of the two primer sets, here 500) ###
epidome_filtered_samples = filter_lowcount_samples_epidome(epidome_object,500,500)
### Combine ASVs from dada output ###
epidome_ASV_combined = combine_ASVs_epidome(epidome_filtered_samples)
epidome_object_mock = prune_by_variable_epidome(epidome_ASV_combined,"sample.type",c("Mock community"))
epidome_object_clinical = prune_by_variable_epidome(epidome_ASV_combined,"sample.type",c("Clinical"))
pt_site_tbl = table(epidome_object_clinical$metada$patient.sample.site)
include_values = names(pt_site_tbl)[which(pt_site_tbl==2)]
epidome_object_clinical_pruned = prune_by_variable_epidome(epidome_object_clinical,"patient.sample.site",include_values)
epidome_clinical_pruned_norm = normalize_epidome_object(epidome_object_clinical_pruned)
sample_site = epidome_clinical_pruned_norm$metadata$sample.site
pca_pt = plot_PCA_epidome(epidome_clinical_pruned_norm,"patient.ID",RColorBrewer::brewer.pal(12,"Paired")[c(1:10,12)],plot_ellipse = F)
pca_pt = pca_pt + geom_point(size=2,aes(shape=sample_site)) + scale_shape_manual(values=c(3,1))
pca_pt + geom_point()
pca_pt + geom_point(size=2)
pca_site = plot_PCA_epidome(epidome_clinical_pruned_norm,"sample.site",c())
pca_site = pca_site + geom_point(size=2)
color_variable = "patient.ID"
m = epidome_clinical_pruned_norm$metadata
color_variable_factor = m[,which(epidome_clinical_pruned_norm$meta_variables==color_variable)]
data_combined = rbind(epidome_clinical_pruned_norm$p1_table,epidome_clinical_pruned_norm$p2_table)
pca = prcomp(t(data_combined))
plot_df = data.frame(pca$x)
color_vector = setup_colors(levels(color_variable_factor),colors)
labels = c(paste0("PC1 [",sprintf("%.1f",explvar(pca)[1]),"%]"),paste0("PC2, [",sprintf("%.1f",explvar(pca)[2]),"%]"))
pca_pt = ggplot(as.data.frame(pca$x),aes(x=PC1,y=PC2,color = color_variable_factor,shape=sample_site)) + labs(color = color_variable) + geom_point(size=2, alpha=1) + scale_colour_manual(values = color_vector) + xlab(labels[1]) + ylab(labels[2]) + theme_bw()+ scale_shape_manual(values=c(16,17))
library(gridExtra)
grid.arrange(pca_site,pca_pt,ncol=2)
count_table_mock = classify_epidome(epidome_object_mock,ST_amplicon_table)
count_table_mock = count_table_mock[,order(colnames(count_table_mock))]
barplot_mock = make_barplot_epidome(count_table_mock)
count_table_clinical = classify_epidome(epidome_object_clinical_pruned,ST_amplicon_table)
count_table_clinical = count_table_clinical[,order(colnames(count_table_clinical))]
barplot_clinical = make_barplot_epidome(count_table_clinical)
grid.arrange(barplot_mock, barplot_clinical, ncol=2)
color_table = read.table("example_data/epidome_color_codes.txt",sep = "\t",header=T,comment.char = "")
color_table = rbind(color_table,data.frame(c()))
mock_STs = c(2,5,14,87,215,218,"Unclassified")
count_mock_fixed = rbind(count_table_mock[rownames(count_table_mock) %in% mock_STs,],colSums(count_table_mock[!rownames(count_table_mock) %in% mock_STs,]))
rownames(count_mock_fixed)[nrow(count_mock_fixed)] = "Other"
dd<-apply(count_mock_fixed, 2, function(x) x/sum(x)*100)
count_mock_fixed<-as.data.frame(dd)
count_mock_fixed$ST = rownames(count_mock_fixed)
color_table = read.table("example_data/epidome_color_codes.txt",sep="\t",comment.char = "",header=TRUE)
melt_df = melt(count_mock_fixed)
colnames(melt_df) = c("ST","Sample","Count")
ST_levels = c(2,5,14,87,215,218,"Other","Unclassified")
melt_df$ST = factor(melt_df$ST, levels=ST_levels)
ST = unlist(lapply(ST_levels, function(x) if (x %in% color_table$ST) { as.vector(color_table$hex.code)[which(color_table$ST==x)] } else {"Missing"}))
ST[which(ST=="Missing")] = c("#f5ed5d","#e8b099")
p = ggplot() + geom_bar(aes(y = Count, x = Sample, fill = ST), data = melt_df, stat="identity") + scale_fill_manual(values = ST) + theme_bw() + ylab(ylabel) + theme(axis.text.x = element_blank()) + xlab("")
barplot_mock_fixedcol = p
p = ggplot() + geom_bar(aes(y = Count, x = Sample, fill = ST), data = melt_df, stat="identity") + scale_fill_manual(values = ST) + theme_bw() + ylab("") + theme(axis.text.x = element_blank()) + xlab("")
barplot_mock_fixedcol = p
barplot_mock_fixedcol
p = ggplot() + geom_bar(aes(y = Count, x = Sample, fill = ST), data = melt_df, stat="identity") + scale_fill_manual(values = ST) + theme_bw()  + theme(axis.text.x = element_blank()) + xlab("")
barplot_mock_fixedcol = p
barplot_mock_fixedcol
p = ggplot() + geom_bar(aes(y = Count, x = Sample, fill = ST), data = melt_df, stat="identity") + scale_fill_manual(values = ST) + theme_bw()  + theme(axis.text.x = element_blank()) + xlab("Relative abundance (percent)")
barplot_mock_fixedcol = p
barplot_mock_fixedcol
barplot_mock_fixedcol = p
barplot_mock_fixedcol
p = ggplot() + geom_bar(aes(y = Count, x = Sample, fill = ST), data = melt_df, stat="identity") + scale_fill_manual(values = ST) + theme_bw()  + theme(axis.text.x = element_blank()) + xlab("Relative abundance (percent)")
barplot_mock_fixedcol = p
barplot_mock_fixedcol
p = ggplot() + geom_bar(aes(y = Count, x = Sample, fill = ST), data = melt_df, stat="identity") + scale_fill_manual(values = ST) + theme_bw()  + theme(axis.text.x = element_blank()) + ylab("Relative abundance (percent)")
barplot_mock_fixedcol = p
barplot_mock_fixedcol
p = ggplot() + geom_bar(aes(y = Count, x = Sample, fill = ST), data = melt_df, stat="identity") + scale_fill_manual(values = ST) + theme_bw()  + theme(axis.text.x = element_blank()) + ylab("Relative abundance (percent)") + xlab("")
barplot_mock_fixedcol = p
barplot_mock_fixedcol
#### clinical mock with article colors
rownames(count_table_clinical)[which(rownames(count_table_clinical)=='-')] = "Novel"
mock_STs = rownames(count_table_clinical)[order(rowSums(count_table_clinical),decreasing = T)][1:12]
count_mock_fixed = rbind(count_table_clinical[rownames(count_table_clinical) %in% mock_STs,],colSums(count_table_clinical[!rownames(count_table_clinical) %in% mock_STs,]))
rownames(count_mock_fixed)[nrow(count_mock_fixed)] = "Other"
dd<-apply(count_mock_fixed, 2, function(x) x/sum(x)*100)
count_mock_fixed<-as.data.frame(dd)
count_mock_fixed$ST = rownames(count_mock_fixed)
melt_df = melt(count_mock_fixed)
colnames(melt_df) = c("ST","Sample","Count")
ST_numbers = mock_STs[which(!mock_STs %in% c("Unclassified","Novel"))]
ST_levels = c(ST_numbers[order(as.numeric(ST_numbers))],c("Novel","Unclassified","Other"))
melt_df$ST = factor(melt_df$ST, levels=ST_levels)
ST = unlist(lapply(ST_levels, function(x) if (x %in% color_table$ST) { as.vector(color_table$hex.code)[which(color_table$ST==x)] } else {"Missing"}))
ST[which(ST=="Missing")] = c("#a1984d","#ba291c","#89c981")
p = ggplot() + geom_bar(aes(y = Count, x = Sample, fill = ST), data = melt_df, stat="identity") + scale_fill_manual(values = ST) + theme_bw() + theme(axis.text.x = element_blank()) + ylab("Relative abundance (percent)") + xlab("")
barplot_clinical_fixedcol = p
ST[which(ST=="Missing")]
ST
#### clinical mock with article colors
rownames(count_table_clinical)[which(rownames(count_table_clinical)=='-')] = "Novel"
mock_STs = rownames(count_table_clinical)[order(rowSums(count_table_clinical),decreasing = T)][1:12]
count_mock_fixed = rbind(count_table_clinical[rownames(count_table_clinical) %in% mock_STs,],colSums(count_table_clinical[!rownames(count_table_clinical) %in% mock_STs,]))
rownames(count_mock_fixed)[nrow(count_mock_fixed)] = "Other"
dd<-apply(count_mock_fixed, 2, function(x) x/sum(x)*100)
dd
count_mock_fixed<-as.data.frame(dd)
count_mock_fixed$ST = rownames(count_mock_fixed)
melt_df = melt(count_mock_fixed)
colnames(melt_df) = c("ST","Sample","Count")
ST_numbers = mock_STs[which(!mock_STs %in% c("Unclassified","Novel"))]
ST_levels = c(ST_numbers[order(as.numeric(ST_numbers))],c("Novel","Unclassified","Other"))
melt_df$ST = factor(melt_df$ST, levels=ST_levels)
ST = unlist(lapply(ST_levels, function(x) if (x %in% color_table$ST) { as.vector(color_table$hex.code)[which(color_table$ST==x)] } else {"Missing"}))
ST
which(ST=="Missing")
ST[which(ST=="Missing")] = c("#a1984d","#ba291c")
p = ggplot() + geom_bar(aes(y = Count, x = Sample, fill = ST), data = melt_df, stat="identity") + scale_fill_manual(values = ST) + theme_bw() + theme(axis.text.x = element_blank()) + ylab("Relative abundance (percent)") + xlab("")
barplot_clinical_fixedcol = p
barplot_clinical_fixedcol
Sample
melt_df$Sample
p = ggplot() + geom_bar(aes(y = Count, x = Sample, fill = ST), data = melt_df, stat="identity") + scale_fill_manual(values = ST) + theme_bw() + ylab("Relative abundance (percent)") + xlab("")
barplot_clinical_fixedcol = p
barplot_clinical_fixedcol
p = ggplot() + geom_bar(aes(y = Count, x = Sample, fill = ST), data = melt_df, stat="identity") + scale_fill_manual(values = ST) + theme_bw() + theme(axis.text.x = element_text(angle = 90)) + ylab("Relative abundance (percent)") + xlab("")
barplot_clinical_fixedcol = p
barplot_clinical_fixedcol
#ST[which(ST=="Missing")] = c("#a1984d","#ba291c","#89c981")
ST[which(ST=="Missing")] = c("#a1984d","#89c981")
p = ggplot() + geom_bar(aes(y = Count, x = Sample, fill = ST), data = melt_df, stat="identity") + scale_fill_manual(values = ST) + theme_bw() + ylab(ylabel) + theme(axis.text.x = element_blank()) + xlab("")
p = ggplot() + geom_bar(aes(y = Count, x = Sample, fill = ST), data = melt_df, stat="identity") + scale_fill_manual(values = ST) + theme_bw() + theme(axis.text.x = element_text(angle = 90)) + ylab("Relative abundance (percent)") + xlab("")
barplot_clinical_fixedcol = p
melt_df = melt(count_mock_fixed)
colnames(melt_df) = c("ST","Sample","Count")
ST_numbers = mock_STs[which(!mock_STs %in% c("Unclassified","Novel"))]
ST_levels = c(ST_numbers[order(as.numeric(ST_numbers))],c("Novel","Unclassified","Other"))
melt_df$ST = factor(melt_df$ST, levels=ST_levels)
ST = unlist(lapply(ST_levels, function(x) if (x %in% color_table$ST) { as.vector(color_table$hex.code)[which(color_table$ST==x)] } else {"Missing"}))
#ST[which(ST=="Missing")] = c("#a1984d","#ba291c","#89c981")
ST[which(ST=="Missing")] = c("#a1984d","#89c981")
p = ggplot() + geom_bar(aes(y = Count, x = Sample, fill = ST), data = melt_df, stat="identity") + scale_fill_manual(values = ST) + theme_bw() + theme(axis.text.x = element_text(angle = 90)) + ylab("Relative abundance (percent)") + xlab("")
barplot_clinical_fixedcol = p
melt_df = melt(count_mock_fixed)
colnames(melt_df) = c("ST","Sample","Count")
ST_numbers = mock_STs[which(!mock_STs %in% c("Unclassified","Novel"))]
ST_levels = c(ST_numbers[order(as.numeric(ST_numbers))],c("Novel","Unclassified","Other"))
melt_df$ST = factor(melt_df$ST, levels=ST_levels)
ST = unlist(lapply(ST_levels, function(x) if (x %in% color_table$ST) { as.vector(color_table$hex.code)[which(color_table$ST==x)] } else {"Missing"}))
#ST[which(ST=="Missing")] = c("#a1984d","#ba291c","#89c981")
ST[which(ST=="Missing")] = c("#a1984d","#ba291c")
p = ggplot() + geom_bar(aes(y = Count, x = Sample, fill = ST), data = melt_df, stat="identity") + scale_fill_manual(values = ST) + theme_bw() + theme(axis.text.x = element_text(angle = 90)) + ylab("Relative abundance (percent)") + xlab("")
barplot_clinical_fixedcol = p
barplot_clinical_fixedcol
pca_site
sample_site = epidome_clinical_pruned_norm$metadata$sample.site
pca_pt = plot_PCA_epidome(epidome_clinical_pruned_norm,"patient.ID",RColorBrewer::brewer.pal(12,"Paired")[c(1:10,12)],plot_ellipse = F)
pca_pt = pca_pt + geom_point(size=2,aes(shape=sample_site)) + scale_shape_manual(values=c(3,1))
pca_pt
epidome_ASV_combined = combine_ASVs_epidome(epidome_filtered_samples)
epidome_object_mock = prune_by_variable_epidome(epidome_ASV_combined,"sample.type",c("Mock community"))
epidome_object_clinical = prune_by_variable_epidome(epidome_ASV_combined,"sample.type",c("Clinical"))
pt_site_tbl = table(epidome_object_clinical$metada$patient.sample.site)
include_values = names(pt_site_tbl)[which(pt_site_tbl==2)]
epidome_object_clinical_pruned = prune_by_variable_epidome(epidome_object_clinical,"patient.sample.site",include_values)
epidome_clinical_pruned_norm = normalize_epidome_object(epidome_object_clinical_pruned)
sample_site = epidome_clinical_pruned_norm$metadata$sample.site
pca_pt = plot_PCA_epidome(epidome_clinical_pruned_norm,"patient.ID",RColorBrewer::brewer.pal(12,"Paired")[c(1:10,12)],plot_ellipse = F)
pca_pt = pca_pt + geom_point(size=2,aes(shape=sample_site)) + scale_shape_manual(values=c(3,1))
pca_pt + geom_point()
pca_pt + geom_point(size=2)
pca_site = plot_PCA_epidome(epidome_clinical_pruned_norm,"sample.site",c())
pca_site = pca_site + geom_point(size=2)
source("https://raw.githubusercontent.com/ssi-dk/epidome/master/scripts/epidome_functions.R")
setwd("/Volumes/data/MPV/projects/git.repositories/epidome/")
### Load amplicon table for classification ###
ST_amplicon_table = read.table("DB/epidome_ST_amplicon_frequencies.txt",sep = "\t")
epi01_table = read.table("example_data/190920_run1_and_2_G216_seqtab_nochim.csv.classified.csv",sep = ";",header=TRUE,row.names=1)
epi02_table = read.table("example_data/190920_run1_and_2_yycH_seqtab_nochim.csv.classified.csv",sep = ";",header=TRUE,row.names=1)
### Load metadata table
metadata_table = read.table("example_data/article_metadata.txt",header=TRUE,row.names=1)
### Setup an object for easy handling of epidome data
epidome_object = setup_epidome_object(epi01_table,epi02_table,metadata_table = metadata_table)
#epidome_object = setup_epidome_object(epi01_table,epi02_table)
### Check if number of sequences from each primer for each samples match up approximately ###
compare_primer_output(epidome_object)
compare_primer_output(epidome_object,"sample.type")
compare_primer_output(epidome_object,"patient.sample.site")
compare_primer_output(epidome_object,"sample.type")
### Combine ASVs from dada output ###
epidome_ASV_combined = combine_ASVs_epidome(epidome_object)
### Filter lowcount samples (removes any sample that has less than X sequences from one of the two primer sets, here 500) ###
epidome_filtered_samples = filter_lowcount_samples_epidome(epidome_object,500,500)
epidome_ASV_combined = combine_ASVs_epidome(epidome_filtered_samples)
count_table = classify_epidome(epidome_ASV_combined,ST_amplicon_table)
### Make barplot based on classification. Set reorder=TRUE to order samples based on Bray Curtis dissimilarity and/or set normalize=FALSE to not normalize to percent ###
p = make_barplot_epidome(count_table,reorder=TRUE,normalize=TRUE)
p
epidome_object_mock = prune_by_variable_epidome(epidome_object,"sample.type",c("Mock community"))
epidome_object_mock
eo_mock = epidome_object_mock
eo_mock$p1_seqs[order(rowSums(eo_mock$p1_table))]
rsums = rowSums(eo_mock$p1_table)
rsums
names(rsums) = eo_mock$p1_seqs
sort(rsums)
sort(rsums)
library(ape)
library(phytools)
library(alluvial)
setwd("/Volumes/data/MPV/projects/SCCmec/CCR")
setwd("E:/Github/SCCmec/CCR")
setwd("/Users/thej/Documents/GitHub/SCCmec/CCR")
sp_count_table = read.table("/Volumes/data/DB/refseq/Staphylococcus_species_counts_191128.txt",sep = "\t")
sp_count_table = read.table("https://raw.githubusercontent.com/ssi-dk/SCCmec/master/Staphylococcus_species_counts_191128.txt",sep = "\t")
sp_count_vec = sp_count_table$V2
names(sp_count_vec) = sp_count_table$V1
triplet_color_vec = c("#61d2ff","#468bfa","#030bfc","#63ff7d","#23db64","#009133","#ff9999","#f03232","#c90000",
"#ffe194","#ffcc47","#e8a800","#f2a8ff","#e44dff","#9e00ba","#f8fc6a","#b8bd00","#786000",
"#c4c4c4","#545454","#000000")
tbl = read.table("https://raw.githubusercontent.com/ssi-dk/SCCmec/master/CCR/ccr_all_QC_uniq_table.txt",sep = "\t",row.names=NULL,header = T,comment.char = "",check.names = F,quote = "")
all_tbl = tbl
tbl$uniq_fasta_ID = paste0(as.vector(tbl$uniq_ID),'|',as.vector(tbl$seq_count))
tbl$GCF_ID = unlist(lapply(as.vector(tbl$ID), function(x) paste0(strsplit(x,"_")[[1]][4:5],collapse="_")))
all_tbl = tbl
dist_mat = read.table("https://raw.githubusercontent.com/ssi-dk/SCCmec/master/CCR/ccr_all_QC_uniq_sim.txt",sep="\t",header=T,row.names=1)
dist_obj = as.dist(dist_mat)
fit = hclust(dist_obj)
plot(fit)
ccr_groups = cutree(fit,h=49)
rect.hclust(fit,h=49)
unique(ccr_groups)
tbl$ccr_group[grep('ccrA',tbl$fasta_ID)]
tbl$ccr_group[grep('ccrB',tbl$fasta_ID)]
tbl$ccr_group[grep('ccrC',tbl$fasta_ID)]
tbl$ccr_group = NA
for (i in 1:length(ccr_groups)) {
name = names(ccr_groups)[i]
group = ccr_groups[i]
tbl$ccr_group[which(tbl$uniq_fasta_ID==name)] = group
}
tbl$ccr_group[grep('ccrA',tbl$fasta_ID)]
tbl$ccr_group[grep('ccrB',tbl$fasta_ID)]
tbl$ccr_group[grep('ccrC',tbl$fasta_ID)]
version()
versioninfo()
version
info(phyloseq)
versioninfo(phyloseq)
citation(phyloseq)
library(phyloseq)
citation(phyloseq)
citation('phyloseq')
package_version(phyloseq)
packageVersion(phyloseq)
packageVersion('phyloseq')
library(vegan)
citation(vegan)
citation('vegan')
citation(ggplot2)
citation('ggplot2')
packageVersion(ggplot2)
packageVersion('ggplot2')
packageVersion('plotly')
citation('plotly')
citation('R')
citation()
citation(phyloseq)
citation(phyloseq)
citation('phyloseq')
citation('vegan')
citation()
head(tbl)
tbl = tbl = read.table("https://raw.githubusercontent.com/ssi-dk/SCCmec/master/CCR/fastas/ccrA_uniq_table.txt",sep = "\t",row.names=NULL,header = T,comment.char = "",check.names = F,quote = "")
tbl$uniq_fasta_ID = paste0(as.vector(tbl$uniq_ID),'|',as.vector(tbl$seq_count))
tbl$GCF_ID = unlist(lapply(as.vector(tbl$ID), function(x) paste0(strsplit(x,"_")[[1]][4:5],collapse="_")))
dist_mat = as.matrix(read.table("protein_blast/ccr_haplotype_uniq_fastas/ccrA_pairwise_sim.txt",sep = "\t",header=T, row.names=1))
dist_mat = as.matrix(read.table("https://raw.githubusercontent.com/ssi-dk/SCCmec/master/CCR/fastas/ccrA_all_uniq_sim.txt",sep = "\t",header=T, row.names=1))
aln_dist = as.dist(dist_mat)
fit = hclust(aln_dist,method = "complete")
v = c()
for (i in 10:40) {
g = cutree(fit,h=i)
v = c(v,length(unique(g)))
}
v_A = v
plot(10:40,v)
ccr_groups = cutree(fit,h=22)
rect.hclust(fit,h=22)
tbl$ccrA_group = NA
new_ccr_count = 1
unique(ccr_groups)
for (i in 1:length(ccr_groups)) {
name = names(ccr_groups)[i]
group = ccr_groups[i]
tbl$ccrA_group[which(tbl$uniq_fasta_ID==name)] = group
}
tbl$ccr_allotype = paste0('ccrAn',as.vector(tbl$ccrA_group))
tbl$ccr_type = "ccrA"
IWG_ccrA_tbl = tbl[grep('ccrA',tbl$fasta_ID),]
table(as.vector(IWG_ccrA_tbl$fasta_ID),as.vector(IWG_ccrA_tbl$ccrA_group))
sort(unique(ccr_groups))
ccrA_tbl = tbl[which(tbl$ccr_type=="ccrA"),]
#allotype_colors = c(RColorBrewer::brewer.pal(12,"Paired"),"#d9d9d9")
allotype_colors = triplet_color_vec[1:19]
ccr_allotype_vec = unique(ccrA_tbl$ccr_allotype)
ccrA_tbl$allotype_color = NA
for (i in 1:length(allotype_colors)) {
col = allotype_colors[i]
ccr_type = ccr_allotype_vec[i]
idx = which(ccrA_tbl$ccr_allotype==ccr_type)
names = as.vector(ccrA_tbl$fasta_ID[idx])
test = names[grep('IWG',names)]
if (length(test)>0) {
print(test)
t = strsplit(test[1],'_')[[1]][1]
ccrA_tbl$ccr_allotype[idx] = t
}
ccrA_tbl$allotype_color[idx] = col
}
ccrA_uniq_tbl = ccrA_tbl[which(!duplicated(as.vector(ccrA_tbl$uniq_fasta_ID))),]
ccrA_uniq_tbl
dist_mat = as.matrix(read.table("protein_blast/ccr_haplotype_uniq_fastas/ccrA_pairwise_sim.txt",sep = "\t",header=T, row.names=1))
dist_mat = as.matrix(read.table("https://raw.githubusercontent.com/ssi-dk/SCCmec/master/CCR/fastas/ccrA_all_uniq_sim.txt",sep = "\t",header=T, row.names=1))
aln_dist = as.dist(dist_mat)
fit = hclust(aln_dist,method = "complete")
v = c()
for (i in 10:40) {
g = cutree(fit,h=i)
v = c(v,length(unique(g)))
}
v_A = v
plot(10:40,v)
ccr_groups = cutree(fit,h=22)
rect.hclust(fit,h=22)
tbl$ccrA_group = NA
new_ccr_count = 1
unique(ccr_groups)
for (i in 1:length(ccr_groups)) {
name = names(ccr_groups)[i]
group = ccr_groups[i]
tbl$ccrA_group[which(tbl$uniq_fasta_ID==name)] = group
}
tbl$ccr_allotype = paste0('ccrAn',as.vector(tbl$ccrA_group))
tbl$ccr_type = "ccrA"
IWG_ccrA_tbl = tbl[grep('ccrA',tbl$fasta_ID),]
table(as.vector(IWG_ccrA_tbl$fasta_ID),as.vector(IWG_ccrA_tbl$ccrA_group))
sort(unique(ccr_groups))
ccrA_tbl = tbl[which(tbl$ccr_type=="ccrA"),]
#allotype_colors = c(RColorBrewer::brewer.pal(12,"Paired"),"#d9d9d9")
allotype_colors = triplet_color_vec[1:19]
ccr_allotype_vec = unique(ccrA_tbl$ccr_allotype)
ccrA_tbl$allotype_color = NA
for (i in 1:length(allotype_colors)) {
col = allotype_colors[i]
ccr_type = ccr_allotype_vec[i]
idx = which(ccrA_tbl$ccr_allotype==ccr_type)
names = as.vector(ccrA_tbl$fasta_ID[idx])
test = names[grep('IWG',names)]
if (length(test)>0) {
print(test)
t = strsplit(test[1],'_')[[1]][1]
ccrA_tbl$ccr_allotype[idx] = t
}
ccrA_tbl$allotype_color[idx] = col
}
ccrA_uniq_tbl = ccrA_tbl[which(!duplicated(as.vector(ccrA_tbl$uniq_fasta_ID))),]
#### ccrB ####
tbl = tbl = read.table("https://raw.githubusercontent.com/ssi-dk/SCCmec/master/CCR/fastas/ccrB_uniq_table.txt",sep = "\t",row.names=NULL,header = T,comment.char = "",check.names = F,quote = "")
tbl$uniq_fasta_ID = paste0(as.vector(tbl$uniq_ID),'|',as.vector(tbl$seq_count))
tbl$GCF_ID = unlist(lapply(as.vector(tbl$ID), function(x) paste0(strsplit(x,"_")[[1]][4:5],collapse="_")))
dist_mat = as.matrix(read.table("protein_blast/ccr_haplotype_uniq_fastas/ccrB_pairwise_sim.txt",sep = "\t",header=T, row.names=1))
dist_mat = as.matrix(read.table("https://raw.githubusercontent.com/ssi-dk/SCCmec/master/CCR/fastas/ccrB_all_uniq_sim.txt",sep = "\t",header=T, row.names=1))
aln_dist = as.dist(dist_mat)
fit = hclust(aln_dist,method = "complete")
v = c()
for (i in 10:40) {
g = cutree(fit,h=i)
v = c(v,length(unique(g)))
}
v_B = v
plot(10:40,v)
ccr_groups = cutree(fit,h=22)
rect.hclust(fit,h=22)
tbl$ccrB_group = NA
new_ccr_count = 1
unique(ccr_groups)
for (i in 1:length(ccr_groups)) {
name = names(ccr_groups)[i]
group = ccr_groups[i]
tbl$ccrB_group[which(tbl$uniq_fasta_ID==name)] = group
}
tbl$ccr_allotype = paste0('ccrBn',as.vector(tbl$ccrB_group))
tbl$ccr_type = "ccrB"
IWG_ccrB_tbl = tbl[grep('ccrB',tbl$fasta_ID),]
table(as.vector(IWG_ccrB_tbl$fasta_ID),as.vector(IWG_ccrB_tbl$ccrB_group))
sort(unique(ccr_groups))
ccrB_tbl = tbl[which(tbl$ccr_type=="ccrB"),]
#allotype_colors = c(RColorBrewer::brewer.pal(12,"Paired"),"#d9d9d9")
allotype_colors = triplet_color_vec[1:16]
ccr_allotype_vec = unique(ccrB_tbl$ccr_allotype)
ccrB_tbl$allotype_color = NA
for (i in 1:length(allotype_colors)) {
col = allotype_colors[i]
ccr_type = ccr_allotype_vec[i]
idx = which(ccrB_tbl$ccr_allotype==ccr_type)
names = as.vector(ccrB_tbl$fasta_ID[idx])
test = names[grep('IWG',names)]
if (length(test)>0) {
print(test)
t = strsplit(test[1],'_')[[1]][1]
ccrB_tbl$ccr_allotype[idx] = t
}
ccrB_tbl$allotype_color[idx] = col
}
ccrB_uniq_tbl = ccrB_tbl[which(!duplicated(as.vector(ccrB_tbl$uniq_fasta_ID))),]
tbl = tbl = read.table("https://raw.githubusercontent.com/ssi-dk/SCCmec/master/CCR/fastas/ccrC_uniq_table.txt",sep = "\t",row.names=NULL,header = T,comment.char = "",check.names = F,quote = "")
tbl$uniq_fasta_ID = paste0(as.vector(tbl$uniq_ID),'|',as.vector(tbl$seq_count))
tbl$GCF_ID = unlist(lapply(as.vector(tbl$ID), function(x) paste0(strsplit(x,"_")[[1]][4:5],collapse="_")))
dist_mat = as.matrix(read.table("protein_blast/ccr_haplotype_uniq_fastas/ccrC_pairwise_sim.txt",sep = "\t",header=T, row.names=1))
dist_mat = as.matrix(read.table("https://raw.githubusercontent.com/ssi-dk/SCCmec/master/CCR/fastas/ccrC_all_uniq_sim.txt",sep = "\t",header=T, row.names=1))
aln_dist = as.dist(dist_mat)
fit = hclust(aln_dist,method = "complete")
v = c()
for (i in 10:40) {
g = cutree(fit,h=i)
v = c(v,length(unique(g)))
}
v_C = v
plot(10:40,v)
ccr_groups = cutree(fit,h=22)
rect.hclust(fit,h=22)
tbl$ccrC_group = NA
new_ccr_count = 1
unique(ccr_groups)
for (i in 1:length(ccr_groups)) {
name = names(ccr_groups)[i]
group = ccr_groups[i]
tbl$ccrC_group[which(tbl$uniq_fasta_ID==name)] = group
}
tbl$ccr_allotype = paste0('ccrCn',as.vector(tbl$ccrC_group))
tbl$ccr_type = "ccrC"
IWG_ccrC_tbl = tbl[grep('ccrC',tbl$fasta_ID),]
table(as.vector(IWG_ccrC_tbl$fasta_ID),as.vector(IWG_ccrC_tbl$ccrC_group))
sort(unique(ccr_groups))
ccrC_tbl = tbl[which(tbl$ccr_type=="ccrC"),]
allotype_colors = RColorBrewer::brewer.pal(6,"Set1")
#allotype_colors = triplet_color_vec[1:16]
ccr_allotype_vec = unique(ccrC_tbl$ccr_allotype)
ccrC_tbl$allotype_color = NA
for (i in 1:length(allotype_colors)) {
col = allotype_colors[i]
ccr_type = ccr_allotype_vec[i]
idx = which(ccrC_tbl$ccr_allotype==ccr_type)
names = as.vector(ccrC_tbl$fasta_ID[idx])
test = names[grep('IWG',names)]
if (length(test)>0) {
print(test)
t = strsplit(test[1],'_')[[1]][1]
ccrC_tbl$ccr_allotype[idx] = t
}
ccrC_tbl$allotype_color[idx] = col
}
ccrC_uniq_tbl = ccrC_tbl[which(!duplicated(as.vector(ccrC_tbl$uniq_fasta_ID))),]
ccrA_tbl_2 = ccrA_tbl
colnames(ccrA_tbl_2)[8] = "ccrX_group"
ccrB_tbl_2 = ccrB_tbl
colnames(ccrB_tbl_2)[8] = "ccrX_group"
ccrC_tbl_2 = ccrC_tbl
colnames(ccrC_tbl_2)[8] = "ccrX_group"
ccr_uniq_all = rbind(ccrA_tbl_2,ccrB_tbl_2,ccrC_tbl_2)
ccr_uniq_all$source = "RefSeq"
ccr_uniq_all$source[which(ccr_uniq_all$GCF_ID=="NA_NA")] = "IWG_reference"
ccrA_tbl$source = "RefSeq"
ccrA_tbl$source[which(ccrA_tbl$GCF_ID=="NA_NA")] = "IWG_reference"
freq_tbl = as.data.frame(table(ccrA_tbl$uniq_ID,ccrA_tbl$source))
ccrA_uniq_tbl$IWG_references = unlist(lapply(as.vector(ccrA_uniq_tbl$uniq_ID), function(x) freq_tbl$Freq[which(freq_tbl$Var1 == x & freq_tbl$Var2=="IWG_reference")]))
ccrA_uniq_tbl$IWG_reference = 1
ccrA_uniq_tbl$IWG_reference[which(ccrA_uniq_tbl$IWG_references == 0)] = 0
ccrB_tbl$source = "RefSeq"
ccrB_tbl$source[which(ccrB_tbl$GCF_ID=="NA_NA")] = "IWG_reference"
freq_tbl = as.data.frame(table(ccrB_tbl$uniq_ID,ccrB_tbl$source))
ccrB_uniq_tbl$IWG_references = unlist(lapply(as.vector(ccrB_uniq_tbl$uniq_ID), function(x) freq_tbl$Freq[which(freq_tbl$Var1 == x & freq_tbl$Var2=="IWG_reference")]))
ccrB_uniq_tbl$IWG_reference = 1
ccrB_uniq_tbl$IWG_reference[which(ccrB_uniq_tbl$IWG_references == 0)] = 0
ccrC_tbl$source = "RefSeq"
ccrC_tbl$source[which(ccrC_tbl$GCF_ID=="NA_NA")] = "IWG_reference"
freq_tbl = as.data.frame(table(ccrC_tbl$uniq_ID,ccrC_tbl$source))
ccrC_uniq_tbl$IWG_references = unlist(lapply(as.vector(ccrC_uniq_tbl$uniq_ID), function(x) freq_tbl$Freq[which(freq_tbl$Var1 == x & freq_tbl$Var2=="IWG_reference")]))
ccrC_uniq_tbl$IWG_reference = 1
ccrC_uniq_tbl$IWG_reference[which(ccrC_uniq_tbl$IWG_references == 0)] = 0
head(ccr_uniq_tbl)
head(ccr_uniq_all)
dim(ccr_uniq_all)
